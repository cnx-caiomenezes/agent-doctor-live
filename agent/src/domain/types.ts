/**
 * Domain types and interfaces for multi-participant agent system
 * Following Domain-Driven Design principles
 */

/**
 * Participant roles in the consultation
 */
export enum ParticipantRole {
  DOCTOR = 'doctor',
  PATIENT = 'patient',
  AGENT = 'agent',
}

/**
 * Participant information
 */
export interface Participant {
  readonly identity: string;
  readonly role: ParticipantRole;
  readonly name: string;
  readonly metadata?: Record<string, unknown>;
}

/**
 * Transcription message from a participant
 */
export interface TranscriptionMessage {
  readonly participantId: string;
  readonly participantRole: ParticipantRole;
  readonly transcript: string;
  readonly timestamp: Date;
  readonly confidence?: number;
}

/**
 * Tip generated by the LLM for a participant
 */
export interface TipMessage {
  readonly targetParticipantId: string;
  readonly content: string;
  readonly timestamp: Date;
  readonly priority: TipPriority;
  readonly category?: string;
}

/**
 * Priority levels for tips
 */
export enum TipPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

/**
 * Chat channel type
 */
export enum ChatChannelType {
  PRIVATE = 'private', // One-to-one between agent and participant
  GENERAL = 'general', // Visible to all participants
}

/**
 * Chat context for LLM processing
 */
export interface ChatContext {
  readonly conversationHistory: TranscriptionMessage[];
  readonly participants: ReadonlyMap<string, Participant>;
  readonly systemPrompt: string;
  readonly metadata?: Record<string, unknown>;
}

/**
 * Agent configuration
 */
export interface AgentConfig {
  readonly llmModel: string;
  readonly sttLanguage: string;
  readonly enableNoiseCancellation: boolean;
  readonly maxConversationHistory: number;
  readonly tipGenerationInterval?: number; // milliseconds
}

/**
 * Transcription event
 */
export interface TranscriptionEvent {
  readonly type: 'transcription';
  readonly message: TranscriptionMessage;
}

/**
 * Tip generated event
 */
export interface TipGeneratedEvent {
  readonly type: 'tip_generated';
  readonly tip: TipMessage;
}

/**
 * Participant joined event
 */
export interface ParticipantJoinedEvent {
  readonly type: 'participant_joined';
  readonly participant: Participant;
}

/**
 * Participant left event
 */
export interface ParticipantLeftEvent {
  readonly type: 'participant_left';
  readonly participantId: string;
}

/**
 * Union of all domain events
 */
export type DomainEvent =
  | TranscriptionEvent
  | TipGeneratedEvent
  | ParticipantJoinedEvent
  | ParticipantLeftEvent;

/**
 * Event handler interface
 */
export interface EventHandler<T extends DomainEvent = DomainEvent> {
  handle(event: T): Promise<void> | void;
}
