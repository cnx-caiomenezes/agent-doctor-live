import { initializeLogger, llm, log, voice } from '@livekit/agents';
import type { ReadableStream } from 'stream/web';

export class Triage extends voice.Agent {
  public static AGENT_NAME = 'triage-agent';
  private LOGGER;

  constructor(chatContext: llm.ChatContext) {
    super({
      allowInterruptions: true,
      chatCtx: chatContext,
      instructions: `Voc√™ √© um agente de triagem m√©dica virtual. Seu objetivo √© coletar informa√ß√µes b√°sicas sobre os sintomas do paciente e fornecer orienta√ß√µes iniciais. Siga estas diretrizes:
          1. Cumprimente o paciente de forma amig√°vel.
          2. Pergunte sobre os sintomas principais e sua dura√ß√£o.
          3. Solicite informa√ß√µes adicionais, como hist√≥rico m√©dico relevante.
          4. Forne√ßa orienta√ß√µes iniciais com base nas informa√ß√µes coletadas.
          5. Mantenha a conversa profissional e emp√°tica.
          6. Nao faca diagn√≥sticos definitivos ou prescri√ß√µes m√©dicas.
          7. Sempre recomende que o paciente consulte um profissional de sa√∫de para um diagn√≥stico completo.
          8. Nao faca mais de uma pergunta por vez. Espere a resposta do paciente antes de prosseguir para a proxima pergunta.              

          Lembre-se de que voc√™ n√£o √© um substituto para um profissional de sa√∫de qualificado. Sempre recomende que o paciente procure atendimento m√©dico adequado se os sintomas forem graves ou persistentes.`,
    });

    initializeLogger({ pretty: true, level: 'info' });
    this.LOGGER = log();
  }

  override async onEnter(): Promise<void> {
    await this.session.chatCtx.addMessage({
      role: 'assistant',
      content: `Ol√°! Eu sou o assistente virtual de triagem m√©dica. Bem vindo a triagem m√©dica Conexa Sa√∫de.`,
    });

    const handle = this.session.generateReply({
      instructions: `Cumprimente o paciente seguindo as instru√ß√µes:
      Geralmente cumprimentamos falando:
        - "Bom dia": quando ainda √© antes do meio-dia (<= 12h).
        - "Boa tarde": quando √© ap√≥s meio-dia (>= 13h)
        - "Boa noite": quando √© ap√≥s as 18h`,
      userInput: `Oi, meu nome √© ${this.session.userData.name}`,
    });

    await handle.waitForPlayout();
  }

  override async onUserTurnCompleted(): Promise<void> {
    this.LOGGER.info('User turn completed.');
    return Promise.resolve();
  }

  override onExit(): Promise<void> {
    this.session.generateReply({
      instructions: 'Tell the user a friendly goodbye before you exit.',
    });

    this.LOGGER.info('Exiting triage agent session.');
    return Promise.resolve();
  }

  override async transcriptionNode(
    text: ReadableStream<string>,
  ): Promise<ReadableStream<string> | null> {
    const [loggingStream, returnStream] = text.tee();

    const reader = loggingStream.getReader();
    (async () => {
      try {
        let transcribedText = '';
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          transcribedText += value;
        }

        if(transcribedText.trim().length > 0) {
          this.LOGGER.info('üìù Texto transcrito:', transcribedText);
        }
      } catch (error) {
        this.LOGGER.error('Erro ao ler texto transcrito:', error);
      } finally {
        reader.releaseLock();
      }
    })();

    return returnStream;
  }
}
